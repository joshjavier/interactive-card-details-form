<script>
  class CardPreview extends HTMLElement {
    // Default ids of form elements
    _CARD_FORM = 'cardDetailsForm';
    _CARD_NUMBER = 'cardNumber';
    _CARD_NAME = 'cardName';
    _CARD_EXP_MONTH = 'cardExpMonth';
    _CARD_EXP_YEAR = 'cardExpYear';
    _CARD_CVC = 'cardCvc';

    inputs = {};
    outputs = {};

    connectedCallback() {
      this.inputs = document.getElementById(this._CARD_FORM).elements;

      if (this.getAttribute('side') === 'front') {
        // Bind reactive elements
        this.outputs = {
          number: this.querySelector(`output[for=${this._CARD_NUMBER}]`),
          name: this.querySelector(`output[for=${this._CARD_NAME}]`),
          expMonth: this.querySelector(`output[for=${this._CARD_EXP_MONTH}]`),
          expYear: this.querySelector(`output[for=${this._CARD_EXP_YEAR}]`),
        };

        // Set initial values as placeholders
        this._number = this.outputs.number.textContent;
        this._name = this.outputs.name.textContent;
        this._expMonth = this.outputs.expMonth.textContent;
        this._expYear = this.outputs.expYear.textContent;
      }

      if (this.getAttribute('side') === 'back') {
        this.outputs.cvc = this.querySelector(`output[for=${this._CARD_CVC}]`);
        this._cvc = this.outputs.cvc.textContent;
      }

      for (const key in this.outputs) {
        const input = this.inputs[key];

        // Add event listeners to inputs
        input.addEventListener('input', (event) => {
          this[event.target.name] = event.target.value;
        });
        input.addEventListener('blur', (event) => {
          this[event.target.name] = event.target.value;
        });

        // "Hydrate" the outputs with the form values
        this[key] = input.value;
      }
    }

    set name(val) {
      this.querySelector(`output[for=${this._CARD_NAME}]`).textContent = val || this._name;
    }

    set number(val) {
      val = val.replace(/\s/g, '');
      val = val.replace(/\d{4}(?=.)/g, '$& ');
      this.querySelector(`output[for=${this._CARD_NUMBER}]`).textContent = val || this._number;
    }

    set expMonth(val) {
      val = val.length === 1 ? '0' + val : val;
      this.querySelector(`output[for=${this._CARD_EXP_MONTH}]`).textContent = val || this._expMonth;
    }

    set expYear(val) {
      val = val.length === 1 ? '0' + val : val;
      this.querySelector(`output[for=${this._CARD_EXP_YEAR}]`).textContent = val || this._expYear;
    }

    set cvc(val) {
      this.querySelector(`output[for=${this._CARD_CVC}]`).textContent = val || this._cvc;
    }
  }

  if (!customElements.get('card-preview')) {
    customElements.define('card-preview', CardPreview);
  }
</script>

<!--- MARKUP START --->
<div webc:if="side === 'front'" webc:root>
  <logo></logo>
  <output class="card-number" for="cardNumber" @text="number"> 0000 0000 0000 0000 </output>
  <div class="card-details flex">
    <output class="card-name" for="cardName" @text="name"> Jane Appleseed </output>
    <div class="card-exp">
      <output for="cardExpMonth" @text="exp?.slice(0, 2)">00</output>/<output
        for="cardExpYear"
        @text="exp?.slice(3)"
        >00</output
      >
    </div>
  </div>
</div>

<div webc:if="side === 'back'" webc:root>
  <output class="card-cvc" for="cardCvc" @text="cvc">000</output>
</div>
<!--- MARKUP END --->

<style webc:scoped>
  :host {
    display: block;
    padding: 17.88px 21px 20px 20px;
    width: 286px;
    aspect-ratio: 447 / 245;
    border-radius: 6px;
    background-size: cover;
    background-repeat: no-repeat;
  }

  :host[side='front'] {
    background-color: hsl(249 99% 64%);
    background-image: url('/images/bg-card-front.png');
  }

  :host[side='back'] {
    position: relative;
    background-color: #fff;
    background-image: url('/images/bg-card-back.png');
  }

  [class^='card'] {
    color: #fff;
    text-transform: uppercase;
    transition: all 300ms;
  }

  .card-number {
    display: block;
    font-size: 18px;
    letter-spacing: 2.16px;
    margin-top: 37.38px;
  }

  .card-details {
    margin-top: 16px;
    justify-content: space-between;
  }

  .card-details,
  .card-cvc {
    font-size: 10px;
    letter-spacing: 0.7px;
  }

  .card-cvc {
    position: absolute;
    top: 70px;
    left: 227px;
  }

  @media screen and (min-width: 1000px) {
    :host {
      width: 447px;
      padding: 28px 33px 26px 32px;
      border-radius: 10px;
    }

    .card-number {
      margin-top: 64px;
      font-size: 28px;
      letter-spacing: 3.36px;
    }

    .card-details {
      margin-top: 25px;
    }

    .card-details,
    .card-cvc {
      font-size: 15px;
      letter-spacing: 1.35px;
    }

    .card-cvc {
      top: 111px;
      left: 356px;
    }
  }
</style>
